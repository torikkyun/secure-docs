generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model UserRole {
  id    String @id @default(uuid())
  name  String @unique
  Users User[]

  @@map("user_roles")
}

model DocumentClassification {
  id        String     @id @default(uuid())
  name      String     @unique
  Documents Document[]

  @@map("document_classifications")
}

model DocumentStatus {
  id        String     @id @default(uuid())
  name      String     @unique
  Documents Document[]

  @@map("document_statuses")
}

model ShareStatus {
  id     String  @id @default(uuid())
  name   String  @unique
  Shares Share[]

  @@map("share_statuses")
}

model ActionType {
  id        String     @id @default(uuid())
  name      String     @unique
  AuditLogs AuditLog[]

  @@map("action_types")
}

model User {
  id           String   @id @default(uuid())
  staffId      String   @unique @map("staff_id")
  passwordHash String   @map("password_hash")
  name         String
  department   String?
  roleId       String   @map("role_id")
  status       String   @default("active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  managerId    String?  @map("manager_id")

  Role           UserRole   @relation(fields: [roleId], references: [id])
  Manager        User?      @relation("UserManager", fields: [managerId], references: [id])
  Managed        User[]     @relation("UserManager")
  Wallet         Wallet?
  UploadedDocs   Document[] @relation("Uploader")
  SharesGiven    Share[]    @relation("Sharer")
  SharesReceived Share[]    @relation("Recipient")
  AuditLogs      AuditLog[] @relation("Actor")

  @@map("users")
}

model Wallet {
  id             String   @id @default(uuid())
  userId         String   @unique @map("user_id")
  blockchainAddr String   @unique @map("blockchain_addr")
  publicKey      String   @map("public_key")
  isInternal     Boolean  @default(false) @map("is_internal")
  createdAt      DateTime @default(now()) @map("created_at")

  User User @relation(fields: [userId], references: [id])

  @@map("wallets")
}

model Document {
  id               String   @id @default(uuid())
  fileName         String   @map("file_name")
  mimeType         String   @map("mime_type")
  classificationId String   @map("classification_id")
  statusId         String   @map("status_id")
  fileHash         String   @map("file_hash")
  encryptedPath    String   @map("encrypted_path")
  metadata         Json?
  uploaderId       String   @map("uploader_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")

  Classification DocumentClassification @relation(fields: [classificationId], references: [id])
  Status         DocumentStatus         @relation(fields: [statusId], references: [id])
  Uploader       User                   @relation("Uploader", fields: [uploaderId], references: [id])
  Shares         Share[]

  @@map("documents")
}

model Share {
  id           String    @id @default(uuid())
  documentId   String    @map("document_id")
  sharerId     String    @map("sharer_id")
  recipientId  String    @map("recipient_id")
  wrappedKey   String    @map("wrapped_key")
  statusId     String    @map("status_id")
  expiresAt    DateTime? @map("expires_at")
  blockchainTx String?   @map("blockchain_tx")
  createdAt    DateTime  @default(now()) @map("created_at")

  Document  Document    @relation(fields: [documentId], references: [id])
  Sharer    User        @relation("Sharer", fields: [sharerId], references: [id])
  Recipient User        @relation("Recipient", fields: [recipientId], references: [id])
  Status    ShareStatus @relation(fields: [statusId], references: [id])

  @@map("shares")
}

model AuditLog {
  id           String   @id @default(uuid())
  actionTypeId String   @map("action_type_id")
  actorId      String   @map("actor_id")
  targetId     String?  @map("target_id")
  details      Json?    @map("details")
  status       String   @default("success")
  createdAt    DateTime @default(now()) @map("created_at")

  ActionType ActionType @relation(fields: [actionTypeId], references: [id])
  Actor      User       @relation("Actor", fields: [actorId], references: [id])

  @@map("audit_logs")
}
